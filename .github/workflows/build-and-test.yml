name: Build and Test with Docker Compose

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  docker-compose-test:
    name: Test Docker Compose Services
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Build and start Docker Compose services
      run: |
        docker-compose -f docker-compose.yml up --build -d
        docker ps

    - name: Wait for services to be ready
      run: sleep 20

    - name: Test JupyterLab
      run: curl -f http://localhost:8888 || exit 1

    - name: Test Jekyll documentation
      run: curl -f http://localhost:4000 || exit 1

    - name: Test PostgreSQL database
      run: |
        docker exec postgres_service psql -U user -d prophet_db -c "\l"

    - name: Tear down services
      if: always()
      run: docker-compose -f docker-compose.yml down

  build-and-test-python:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.10"]
        os: ["macos-13", "ubuntu-latest", "windows-latest", "macos-latest-xlarge"]
      fail-fast: false

    steps:
    - name: "Set environment variables (Windows)"
      if: startsWith(runner.os, 'Windows')
      shell: pwsh
      run: |
        (Get-ItemProperty "HKLM:System\CurrentControlSet\Control\FileSystem").LongPathsEnabled
        $os_version = (Get-CimInstance Win32_OperatingSystem).version
        Echo "OS_VERSION=$os_version" >> $env:GITHUB_ENV

    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip
        cache-dependency-path: "**/python/pyproject.toml"

    - name: "Restore RTools40"
      if: startsWith(runner.os, 'Windows')
      id: cache-rtools
      uses: actions/cache@v4
      with:
        path: C:/rtools40
        key: ${{ runner.os }}-${{ env.OS_VERSION }}-rtools-v1

    - name: Install and test
      run: |
        cd python
        python -m pip install -U --editable ".[dev,parallel]"
        python -m pytest prophet/tests/

  build-and-test-r:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}
      fail-fast: false

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}

    steps:
    - uses: actions/checkout@v4

    - uses: r-lib/actions/setup-pandoc@v2

    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: ${{ matrix.config.r }}

    - name: Install remotes
      run: |
        install.packages('remotes')
      shell: Rscript {0}

    - name: Query dependencies
      run: |
        saveRDS(remotes::dev_package_deps(pkgdir = "R/", dependencies = TRUE), ".github/depends.Rds", version = 2)
        writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
      shell: Rscript {0}

    - name: Restore R package cache
      if: runner.os != 'Windows'
      uses: actions/cache@v4
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
        restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

    - name: Install system dependencies
      if: runner.os == 'Linux'
      run: |
        while read -r cmd
        do
          eval sudo $cmd
        done < <(Rscript -e 'writeLines(remotes::system_requirements(os = "ubuntu", os_release = "20.04", path = "R/"))')

    - name: Install dependencies
      run: |
        remotes::install_deps(pkgdir = "R/", dependencies = NA)
        remotes::install_cran(c("rcmdcheck", "knitr", "testthat", "readr", "rmarkdown"))
        install.packages(c("cmdstanr", "posterior"), repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
      shell: Rscript {0}

    - name: Check
      uses: r-lib/actions/check-r-package@v2
      with:
        working-directory: "R/"
        upload-snapshots: true
