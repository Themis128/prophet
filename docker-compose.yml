version: "3.8"

services:
  flask:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flask_service
    ports:
      - "5000:5000"  # Expose Flask on port 5000
    volumes:
      - ./app:/app  # Mount the Flask app directory
      - ./data:/app/data  # Shared data directory
    environment:
      FLASK_ENV: production
    command: ["gunicorn", "-b", "0.0.0.0:5000", "app:app"]  # Run Flask with Gunicorn
    depends_on:
      - postgres  # Ensure PostgreSQL is running before Flask starts
    restart: unless-stopped  # Restart if the service fails

  jupyterlab:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jupyterlab_service
    ports:
      - "8888:8888"  # Expose JupyterLab on port 8888
    volumes:
      - ./notebooks:/notebooks  # Mount notebooks directory
      - ./R:/R  # Mount R directory
      - ./data:/app/data  # Shared data directory
    working_dir: /notebooks
    environment:
      JUPYTER_ENABLE_LAB: "yes"  # Enable JupyterLab
    command: ["/usr/local/bin/start-notebook.sh"]  # Run the JupyterLab script
    depends_on:
      - postgres  # Ensure PostgreSQL is running before JupyterLab starts
    restart: unless-stopped  # Restart if the service fails

  postgres:
    image: postgres:latest
    container_name: postgres_service
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: prophet_db
    ports:
      - "5432:5432"  # Expose PostgreSQL on port 5432
    volumes:
      - db_data:/var/lib/postgresql/data  # Persist database data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  prophet:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: prophet_service
    volumes:
      - /home/tbaltzakis/prophet-main/prophet-main:/app  # Mount the project directory
      - ./data:/app/data  # Shared data directory
    working_dir: /app
    command: ["python", "-m", "prophet.main"]  # Adjust the command to match your application entry point
    depends_on:
      - postgres  # Ensure PostgreSQL is running before Prophet starts
    restart: unless-stopped  # Restart if the service fails

volumes:
  db_data:
