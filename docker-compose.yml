version: "3.8"

services:
  flask_service:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: flask_service
    ports:
      - "5001:5001"
    volumes:
      - ./app:/app
    environment:
      FLASK_ENV: production
    depends_on:
      - postgres_service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  prophet_service:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: prophet_service
    ports:
      - "5002:5002"
    volumes:
      - ./app:/app
    environment:
      PYTHONUNBUFFERED: "1"
    depends_on:
      - postgres_service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres_service:
    image: postgres:latest
    container_name: postgres_service
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: prophet_db
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  jupyterlab_service:
    build:
      context: .
      dockerfile: ./Dockerfile
    container_name: jupyterlab_service
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/notebooks
      - ./R:/R
      - ./data:/app/data
    working_dir: /notebooks
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--allow-root"]
    depends_on:
      - postgres_service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  db_data:
